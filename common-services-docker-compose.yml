version: '3.8'
services:
  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: database
    user: root
    environment:
      SA_PASSWORD: Password123!
      ACCEPT_EULA: Y
    ports:
      - "1433:1433"
    volumes:
      - ./database/data:/var/opt/mssql/data
      - ./database/log:/var/opt/mssql/log
      - ./database/secrets:/var/opt/mssql/secrets
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Password123! -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthsharer
  vault:
    image: vault:1.13.3
    container_name: key_vault
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: http://127.0.0.1:8200
    volumes:
      - ./vault/data:/vault/data
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
    command:
      - "server"
    healthcheck:
      test: ["CMD", "sh", "-c", "vault status || exit 0"]  # Modified to not fail if Vault is sealed
      interval: 10s
      timeout: 5s
      retries: 5
    cap_add:
      - IPC_LOCK
    networks:
      - healthsharer
  vault-init:
    image: vault:1.13.3
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
    volumes:
      - ./vault/data:/vault/data
      - ./vault/policies:/vault/policies
    command: >
      sh -c "
      set -e;
      apk add --no-cache jq;
      if ! vault status | grep -q 'Initialized.*true'; then
        vault operator init -format=json > /vault/data/init.json;
      fi;
      for key in $(jq -r '.unseal_keys_b64[]' /vault/data/init.json); do
        vault operator unseal $$key;
      done;
      export VAULT_TOKEN=$(jq -r '.root_token' /vault/data/init.json);
      if ! vault secrets list | grep -q 'healthsharer/'; then
        vault secrets enable -path=healthsharer -version 2 kv-v2;
        vault kv put healthsharer/secret initial=initial_key
      fi;
      for policy in /vault/policies/*.hcl; do
        if [ -f $$policy ]; then
          policy_name=$(basename $$policy .hcl);
          vault policy write $$policy_name $$policy;
        fi;
      done;
      "
    networks:
      - healthsharer
  rabbitmq:
    image: rabbitmq:3.13.7-management
    container_name: message_queue
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq/data/:/var/lib/rabbitmq/
      - ./rabbitmq/log/:/var/log/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthsharer
  ipfs:
    image: ipfs/kubo:latest
    container_name: ipfs_service     
    ports:
      - 4001:4001
      - 4001:4001/udp
      - 8080:8080
      - 5001:5001
    volumes:
      - "./ipfs/staging:/export"
      - "./ipfs/data:/data/ipfs"
    networks:
      - healthsharer
networks:
  healthsharer:
    external: true
